- name: ttyd
  dockerfile: |
    FROM golang:1.13.4
    RUN apt-get update && \
        export DEBIAN_FRONTEND=noninteractive && \
        apt-get install -y git && \
        rm -rf /var/lib/apt/lists/*
    ENV GOPATH /root/go
    RUN mkdir -p /root/go/src && \
        cd /root/go && \
        go get github.com/tjeske/websocket && \
        cd /root/go/src/github.com/tjeske/websocket/examples/chat && \
        go build *.go
    WORKDIR /root/go/src/github.com/tjeske/websocket/examples/chat
    ENTRYPOINT /root/go/src/github.com/tjeske/websocket/examples/chat/client

  entrypoint: ttyd.familie-jeske.net:3000
  internalport: 8080
  access:
    foo:
      permissions: readable
    bar:
      permissions: readable

# ttyd
# - name: ttyd
#   dockerfile: |
#     #FROM tsl0922/ttyd
#     # neovim
#     FROM ubuntu:18.04
#     RUN apt-get update && \
#         export DEBIAN_FRONTEND=noninteractive && \
#         apt-get install -y neovim cmake g++ pkg-config git vim-common libwebsockets-dev libjson-c-dev libssl-dev && \
#         rm -rf /var/lib/apt/lists/*
#     RUN cd /root && \
#         git clone https://github.com/tsl0922/ttyd.git && \
#         cd ttyd && mkdir build && cd build && \
#         cmake .. && \
#         make && make install
#     ENV TINI_VERSION v0.18.0
#     ADD https://github.com/krallin/tini/releases/download/\${TINI_VERSION}/tini /tini
#     RUN chmod +x /tini

#     RUN apt-get update && \
#         export DEBIAN_FRONTEND=noninteractive && \
#         apt-get install -y neovim cmake g++ pkg-config git vim-common libwebsockets-dev libjson-c-dev libssl-dev && \
#         rm -rf /var/lib/apt/lists/*

#     EXPOSE 7681

#     ADD .bashrc /root

#     ENTRYPOINT ["/tini", "--"]
#     CMD ["ttyd", "bash"]
#   files:
#     .bashrc: |
#       PS1="${user}> " 
#   entrypoint: ttyd.familie-jeske.net:3000
#   internalport: 7681
#   access:
#     foo:
#       permissions: readable
#     bar:
#       permissions: readable

# vscode
- name: vscode
  params:
    theme: Default Dark+
    myparam: myvalue
  dockerfile: |
      FROM codercom/code-server:v2
      USER root
      RUN apt-get update && \
          export DEBIAN_FRONTEND=noninteractive && \
          apt-get install -y apt-transport-https git openjdk-8-jdk software-properties-common wget && \
          rm -rf /var/lib/apt/lists/*
      # add vscode to copy extensions
      RUN wget -q https://packages.microsoft.com/keys/microsoft.asc -O- | sudo apt-key add -
      RUN add-apt-repository "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main"
      RUN apt-get update && \
          export DEBIAN_FRONTEND=noninteractive && \
          apt-get install -y code && \
          rm -rf /var/lib/apt/lists/*
      # add xtext demo mydsl vscode extension
      USER coder
      RUN cd /tmp && \
          git clone https://github.com/itemis/xtext-languageserver-example.git && \
          cd xtext-languageserver-example && \
          ./gradlew vscodeExtension && \
          mkdir -p /home/coder/.local/share/code-server/extensions && \
          code --install-extension /tmp/xtext-languageserver-example/vscode-extension-self-contained/build/vscode/vscode-extension-self-contained-0.0.28.vsix --extensions-dir /home/coder/.local/share/code-server/extensions && \
          rm -rf /tmp/xtext-languageserver-example
      # add demo file
      ADD --chown=coder:coder test.mydsl /home/coder/project/
      # add settings
      ADD --chown=coder:coder settings.json /home/coder/.local/share/code-server/User/settings.json
      # change start options
      CMD [ "--auth", "none", "--disable-telemetry", "/home/coder/project" ]
  files:
    test.mydsl: |
      Hello ${user}!
    settings.json: |
      {
          "workbench.colorTheme": "${theme}"
      }
  entrypoint: vscode.familie-jeske.net:3000
  internalport: 8080
  access:
    admin2:
      permissions: readable, controlable, modifiable
      args:
        theme: Default Dark+
    foo:
      permissions: readable
      args:
        theme: Default Dark+
    bar:
      permissions: readable
      args:
        theme: Default Light+


- name: myApp
  params:
    param1: 7681
  dockerfile: |
      FROM ubuntu:18.04
      RUN apt-get update && \
          export DEBIAN_FRONTEND=noninteractive && \
          apt-get install -y python3 && \
          rm -rf /var/lib/apt/lists/*
      CMD [ "/usr/bin/python3.6", "-m", "http.server", "7681" ]
  files:
    test1: |
      foo
      bar
    test2: |
      bla
      blup
  entrypoint: python.familie-jeske.net:3000
  internalport: 7681
  access:
    foo:
      permissions: readable
      args:
        param1: 7681
- name: eclipse
  dockerfile: |
    FROM fedora:31
    RUN dnf -y update && dnf -y install \
          dbus dbus-daemon dbus-glib \
          xorg-x11-server-utils \
          webkit2gtk3 webkit2gtk3-devel \
          mesa-libGL \
          adobe-source-code-pro-fonts abattis-cantarell-fonts \
          gnome-settings-daemon \
          wget tar \
          java-11-openjdk \
          && dnf clean all

    # Build gtk from source to get patch for https://gitlab.gnome.org/GNOME/gtk/issues/2119 (not yet in Fedora 31)
    # Once recent enough version of GTK is available in Fedora, replace all that by just adding `gtk3` to above dnf command
    RUN dnf -y update && dnf -y install \
          gtk-doc cairo-gobject-devel libepoxy-devel atk-devel at-spi2-atk-devel gobject-introspection-devel \
          gettext-devel pango-devel fribidi-devel gdk-pixbuf2-devel file make diffutils patch \
          && dnf clean all
    COPY request_too_long.patch /root
    RUN cd /root && \
      wget -O- https://gitlab.gnome.org/GNOME/gtk/-/archive/gtk-3-24/gtk-gtk-3-24.tar.gz | tar xz
    RUN cd /root && \
      cd gtk-gtk-3-24 && \
      patch -p1 -i /root/request_too_long.patch && \
      ./autogen.sh --enable-broadway-backend --enable-debug=yes --enable-x11-backend --enable-introspection --disable-gtk-docs --disable-cups --disable-xinerama --disable-xkb --prefix=/opt/gtk && \
      ./configure --enable-broadway-backend --enable-debug=yes --enable-x11-backend --enable-introspection --disable-gtk-docs --disable-cups --disable-xinerama --disable-xkb --prefix=/opt/gtk && \
      make -j10 && \
      make install && \
      cp -rf /opt/gtk/share/glib-2.0/schemas/* /usr/share/glib-2.0/schemas/ && \
      cd .. && \
      rm -r gtk-gtk-3-24
    RUN dnf -y remove \
          gtk-doc cairo-gobject-devel libepoxy-devel atk-devel at-spi2-atk-devel gobject-introspection-devel \
          gettext-devel pango-devel fribidi-devel gdk-pixbuf2-devel file make diffutils \
          && dnf clean all
    ENV LD_LIBRARY_PATH=/opt/gtk/lib
    ENV PATH="/opt/gtk/bin:$PATH"

    # Configure broadway
    ENV BROADWAY_DISPLAY=:5
    ENV BROADWAY_PORT=5000
    EXPOSE 5000
    ENV GDK_BACKEND=broadway

    # Get Eclipse IDE
    RUN echo "Downloading Eclipse" && \
        cd /root && \
        wget -O- "http://ftp.fau.de/eclipse/technology/epp/downloads/release/2019-09/R/eclipse-java-2019-09-R-linux-gtk-x86_64.tar.gz" | tar xz && \
        cd eclipse/ && \
        echo $'name=Eclipse IDE\n\
    id=org.eclipse.ui.ide.workbench\n\
    version=4.13.0' > .eclipseproduct

    # Prepare project area
    RUN mkdir /projects
    #VOLUME /projects

    RUN for f in "/etc" "/var/run" "/projects" "/root"; do \
          chgrp -R 0 \${f} && \
          chmod -R g+rwX \${f}; \
        done

    COPY .fonts.conf /root/
    COPY .fonts.conf /

    #Useful for debug
    #RUN dnf -y install gdb gdb-gdbserver java-11-openjdk-devel

    COPY ./init.sh /
    RUN chmod +x /init.sh
    ENTRYPOINT [ "/init.sh" ]
  files:
    .fonts.conf: |
      <fontconfig>
        <match target="pattern">
          <test name="family" qual="any">
            <string>monospace</string>
          </test>
          <edit binding="strong" mode="prepend" name="family">
            <string>Source Code Pro</string>
          </edit>
        </match>
        <match target="pattern">
          <test name="family" qual="any">
            <string>sans-serif</string>
          </test>
          <edit binding="strong" mode="prepend" name="family">
            <string>Cantarell</string>
          </edit>
        </match>
      </fontconfig>
    gtk_broadway_selection.issue1630.patch: |
      diff --git a/gtk/gtkselection.c b/gtk/gtkselection.c
      index b976d19..7f4919a 100644
      --- a/gtk/gtkselection.c
      +++ b/gtk/gtkselection.c
      @@ -112,6 +112,10 @@
       #include <gdk/wayland/gdkwayland.h>
       #endif
       
      +#ifdef GDK_WINDOWING_BROADWAY
      +#include "broadway/gdkbroadway.h"
      +#endif
      +
       #undef DEBUG_SELECTION
       
       /* Maximum size of a sent chunk, in bytes. Also the default size of
      @@ -2284,6 +2288,26 @@ gtk_selection_init (void)
         gtk_selection_atoms[TARGETS] = gdk_atom_intern_static_string ("TARGETS");
         gtk_selection_atoms[SAVE_TARGETS] = gdk_atom_intern_static_string ("SAVE_TARGETS");
       
      +#if defined GDK_WINDOWING_BROADWAY
      +  /* This patch is a workaround to circumvent unimplemented
      +     clipboard functionality in broadwayd. It eliminates
      +     35s delay on popup menu before first clipboard copy,
      +     by initializing selection to an empty string.
      +   
      +     https://gitlab.gnome.org/GNOME/gtk/issues/1630
      +  */ 
      +  GdkDisplay *display = gdk_display_get_default ();
      +
      +  if (GDK_IS_BROADWAY_DISPLAY (display))
      +  {
      +      g_debug("gtk_selection_init: patched");
      +
      +      gtk_clipboard_set_text (
      +          gtk_clipboard_get_default (display),
      +          "", -1);
      +  }
      +#endif
      +
         initialize = FALSE;
       }

    request_too_long.patch: |
      diff --git a/gdk/broadway/broadway-server.c b/gdk/broadway/broadway-server.c
      index b53f4ed..4818b3b 100644
      --- a/gdk/broadway/broadway-server.c
      +++ b/gdk/broadway/broadway-server.c
      @@ -35,6 +35,8 @@
       #include <string.h>
       #endif
      
      +#define DEBUG_WEBSOCKETS 1
      +
       typedef struct BroadwayInput BroadwayInput;
       typedef struct BroadwayWindow BroadwayWindow;
       struct _BroadwayServer {
      @@ -906,11 +908,15 @@ parse_line (char *line, char *key)
       {
         char *p;
      
      -  if (!g_str_has_prefix (line, key))
      +  if (!g_str_has_prefix (line, key)) {
      +    g_print ("prefix not match :\n");
           return NULL;
      +  }
         p = line + strlen (key);
      -  if (*p != ':')
      +  if (*p != ':') {
      +    g_print ("no :\n");
           return NULL;
      +  }
         p++;
         /* Skip optional initial space */
         if (*p == ' ')
      @@ -992,9 +998,14 @@ start_input (HttpRequest *request)
         host = NULL;
         for (i = 0; lines[i] != NULL; i++)
           {
      -      if ((p = parse_line (lines[i], "Sec-WebSocket-Key")))
      +      g_print ("line: %s\n", lines[i]);
      +      if ((p = parse_line (lines[i], "Sec-Websocket-Key"))) {
      +        key = p;
      +        g_print ("SET KEY: %s\n", key);
      +      } else if ((p = parse_line (lines[i], "Sec-WebSocket-Key"))) {
               key = p;
      -      else if ((p = parse_line (lines[i], "Origin")))
      +        g_print ("SET KEY: %s\n", key);
      +      } else if ((p = parse_line (lines[i], "Origin")))
               origin = p;
             else if ((p = parse_line (lines[i], "Host")))
               host = p;
      @@ -1005,7 +1009,7 @@ start_input (HttpRequest *request)
         if (host == NULL)
           {
             g_strfreev (lines);
      -      send_error (request, 400, "Bad websocket request");
      +      send_error (request, 400, "Bad websocket requestA");
             return;
           }
       
      @@ -1035,7 +1035,7 @@ start_input (HttpRequest *request)
         else
           {
             g_strfreev (lines);
      -      send_error (request, 400, "Bad websocket request");
      +      send_error (request, 400, "Bad websocket requestB");
             return;
           }
       
      @@ -1204,17 +1204,9 @@ got_http_request_line (GInputStream *stream,
           got_request (request);
         else
           {
      -      /* Protect against overflow in request length */
      -      if (request->request->len > 1024 * 5)
      -	{
      -	  send_error (request, 400, "Request too long");
      -	}
      -      else
      -	{
       	  g_string_append_printf (request->request, "%s\n", line);
       	  g_data_input_stream_read_line_async (request->data, 0, NULL,
       					       (GAsyncReadyCallback)got_http_request_line, request);
      -	}
           }
         g_free (line);
       }
      diff --git a/gdk/broadway/gdkdisplay-broadway.c b/gdk/broadway/gdkdisplay-broadway.c
      index 54a1fa8..bd6b894 100644
      --- a/gdk/broadway/gdkdisplay-broadway.c
      +++ b/gdk/broadway/gdkdisplay-broadway.c
      @@ -46,9 +46,7 @@
       static void   gdk_broadway_display_dispose            (GObject            *object);
       static void   gdk_broadway_display_finalize           (GObject            *object);
      
      -#if 0
       #define DEBUG_WEBSOCKETS 1
      -#endif
      
       G_DEFINE_TYPE (GdkBroadwayDisplay, gdk_broadway_display, GDK_TYPE_DISPLAY)

    init.sh: |
      #! /bin/bash
      
      # Set d-bus machine-id
      if [ ! -s /etc/machine-id ]; then
        dbus-uuidgen > /etc/machine-id
      fi
      # Properly start DBus
      export DISPLAY=:0 # workaround dbus asks for DISPLAY to be set
      #export GTK_DEBUG=all
      #export GDK_DEBUG=all  
      echo "eclipse:x:$(id -u):0:root:/root:/bin/bash" >> /etc/passwd
      mkdir -p /var/run/dbus
      dbus-daemon --system --fork &
      #export G_MESSAGES_DEBUG=all
      export DBUS_SESSION_BUS_ADDRESS=$(dbus-daemon --session --fork --print-address)
      export G_MESSAGES_DEBUG=all
      
      broadwayd $BROADWAY_DISPLAY -p $BROADWAY_PORT &
      cd ~
      echo '*** Please connect to http://'`grep $HOSTNAME /etc/hosts | awk '{print $1}'`':'`echo $BROADWAY_PORT`' using your web browser ***'
      
      echo "Starting Eclipse IDE..."
      # Use java ... command instead of launcher as it is more stable with broadway
      #  -> https://bugs.eclipse.org/bugs/show_bug.cgi?id=551685
      # The system properties are necessary to enable restart of the workbench
      export eclipseVm=java
      export eclipseVmargs="-XX:+UseG1GC
      -XX:+UseStringDeduplication
      --add-modules=ALL-SYSTEM
      -Xms256m
      -Xmx1024m
      -Dosgi.requiredJavaVersion=1.8
      -Dosgi.dataAreaRequiresExplicitInit=true
      "
      export eclipseCommands="-jar
      /root/eclipse/plugins/org.eclipse.equinox.launcher_*.jar
      -showSplash
      /root/eclipse/plugins/org.eclipse.epp.package.common_*/splash.bmp
      -data
      /root/eclipse-workspace "
      while true; do # workaround "restart" not operational when using `java` instead of launcher
        \${eclipseVm} \${eclipseVmargs} -Declipse.vm="\${eclipseVm}" -Declipse.vmargs="\${eclipseVmargs}" -Declipse.commands="\${eclipseCommands}" \${eclipseCommands} 1>/dev/null 2>/dev/null
      done &
      sleep 10 #instead of sleep, we should wait for some event implying Eclipse IDE is ready to listen
      gdbus call --session --dest org.eclipse.swt --object-path /org/eclipse/swt --method org.eclipse.swt.FileOpen "['/projects']"
      
      # This allows Eclipse IDE to restart without stopping the container
      tail -f /dev/null
      
      # Tools to debug the container
      #/bin/bash
      #gtk3-demo
  entrypoint: eclipse.familie-jeske.net:3000
  internalport: 5000
  access:
    foo:
      permissions: readable
